name: CI/CD Automation

on:
  push:
    branches:
      - "**"

jobs:
  automation:
    runs-on: ["linux", "ubuntu", "docker", "shell", "backend"]

    steps:
      - name: üõ† Checkout Repository
        uses: actions/checkout@v4

      - name: üî¢ Get Last 4 Digits of Commit SHA
        run: |
          echo "COMMIT_SHA_SHORT=$(git rev-parse --short=4 HEAD)" >> $GITHUB_ENV

      - name: üî¢ Setting up Vault
        run: |
          echo "COMMIT_SHA_SHORT=$(git rev-parse --short=4 HEAD)" >> $GITHUB_ENV         
          echo VAULT_USERNAME=${{ vars.VAULT_USERNAME  }} >> $GITHUB_ENV
          echo VAULT_PASSWORD=${{ vars.VAULT_PASSWORD }} >> $GITHUB_ENV
          echo VAULT_ADDR=${{ vars.VAULT_ADDR }} >> $GITHUB_ENV
          echo "VAULT_TOKEN=$(vault login -method=userpass username="$VAULT_USERNAME" \
              password="$VAULT_PASSWORD" -format=json | jq -r '.auth.client_token')" >> $GITHUB_ENV

      - name: üî¢ Logging into Vault & set variables
        run: |
            vault login -method=userpass username=${{ env.VAULT_USERNAME  }} password=${{ env.VAULT_PASSWORD }}
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_DB_NAME | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_DB_USER | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_DB_PASSWORD | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_DB_HOST | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_DB_PORT | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_HTTP_PORT | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w FORGEJO_SSH_PORT | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w SMTP_HOST | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w SMTP_PORT | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w SMTP_USER | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w SMTP_PASSWORD | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w SMTP_FROM | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w SMTP_TLS | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w USER_UID | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w USER_GID | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w DB_TYPE | awk '{print $1"="$2}'  >> $GITHUB_ENV
            vault kv get Dev-secret/forgejo_smtp | grep -w MAILER_ENABLED | awk '{print $1"="$2}'  >> $GITHUB_ENV
            
      - name: Build Forgejo Image
        run: |
          docker build -t forgejo-secure:latest \
            --build-arg FORGEJO_DB_NAME=$FORGEJO_DB_NAME \
            --build-arg FORGEJO_DB_USER=$FORGEJO_DB_USER \
            --build-arg FORGEJO_DB_PASSWORD=$FORGEJO_DB_PASSWORD \
            --build-arg FORGEJO_DB_HOST=$FORGEJO_DB_HOST \
            --build-arg FORGEJO_DB_PORT=$FORGEJO_DB_PORT \
            --build-arg FORGEJO_HTTP_PORT=$FORGEJO_HTTP_PORT \
            --build-arg FORGEJO_SSH_PORT=$FORGEJO_SSH_PORT \
            --build-arg SMTP_HOST=$SMTP_HOST \
            --build-arg SMTP_PORT=$SMTP_PORT \
            --build-arg SMTP_USER=$SMTP_USER \
            --build-arg SMTP_PASSWORD=$SMTP_PASSWORD \
            --build-arg SMTP_FROM=$SMTP_FROM \
            --build-arg SMTP_TLS=$SMTP_TLS \ 
            --build-arg USER_UID=$USER_UID \
            --build-arg USER_GID=$USER_GID \
            --build-arg DB_TYPE=$DB_TYPE \
            --build-arg MAILER_ENABLED=MAILER_ENABLED \

            ./dbeaver
             # üîß Step 6: Configure AWS Credentials
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # üîë Step 7: Login to Amazon ECR
      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # üì§ Step 8: Tag and Push Docker Image to ECR
      - name: üì¶ Push Docker Image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.COMMIT_SHA_SHORT }}
        run: |
          docker tag forgejo-secure:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Deploy with Docker Compose
        run: |
          cd dbeaver
          docker-compose up -d